#!/bin/bash
# podsync, Copyright (C) 2008 by Jonas Kramer.
# Published under the terms of the GNU General Public License (GPL).


# Print error message.
function error ()
{
	echo $@ >&2
}

# Print error message and exit.
function die ()
{
	error $@
	exit -1
}

# Print stuff in verbose mode.
function verbose ()
{
	if [ "$VERBOSE" -ne 0 ]; then
		echo -e "$@"
	fi
}

# Check if the parameter is an integer.
function int ()
{
	[ "$1" -eq "$1" ] >"/dev/null" 2>&1
	return $?
}


# Check if a podcast has already been downloaded.
function exists ()
{
	if [ -f "$HISTORY" ]; then
		if grep -q '^'"$1"'$' "$HISTORY"; then
			return 1
		fi
	fi
	return 0
}


CLEAR=0
VERBOSE=0

LOG="/dev/null"

# Check if all required tools are in $PATH.
for PROGRAM in "xsltproc" "wget" "sed" "mktemp" "rm" "cat"; do
	PROGPATH="`which "$PROGRAM" 2>$LOG`"
	if [ -z "$PROGPATH" ]; then
		die "$PROGRAM is not in your \$PATH."
	fi
	export $PROGRAM="$PROGPATH"
done


while getopts ":qhcH:vl:" OPTION; do
	case $OPTION in
		"v")
			VERBOSE=1
			;;

		"c")
			CLEAR=1
			;;

		"H")
			PODSYNCHOME="$OPTARG"
			;;

		"l")
			LIMIT="$OPTARG"
			int "$LIMIT" || die 'Argument for -l (item limit) must be an integer.'
			verbose "Limit is $LIMIT."
			;;

		"?")
			die "Unknown option -$OPTARG."
			;;

		":")
			die "Missing argument for option -$OPTARG."
			;;

		"h")
			$cat <<EOT
Usage: `basename "$0"` [-q|-h]

  -h  Print this help and exit.
  -c  Don't download anything, just mark all podcasts as "listened".
  -H  Use the argument of this option as the home directory.
  -v  Be verbose.
  -l  Takes an integer as argument and downloads only that number of items from
      each podcast. All further items are marked as "listened", even if not yet
      downloaded.


  HOW IT WORKS

Export \$PODSYNCHOME so it points to the directory you want to use for syncing
podcasts, or leave it empty if you're fine with the default ("\$HOME/podsync/").
Create a text file named "podcasts.txt" in that directory with the URLs of the
podcast feeds in it, one per line. Then run podsync and watch it download your
podcasts.

EOT
			exit
			;;
	esac
done




# Default home directory.
if [ -z "$PODSYNCHOME" ]; then
	export PODSYNCHOME="$HOME/podsync"
fi

[ -d "$PODSYNCHOME" ] || die "Home directory ('$PODSYNCHOME') does not exist."

verbose "Home is '$PODSYNCHOME'."

# Check for podcast list.
if [ ! -f "$PODSYNCHOME/podcasts.txt" ]; then
	die "No podcast list found in base directory."
fi


# Check for RSS parse XSLT script.
verbose -n 'Checking for XSLT script... '
for XSLT in "/usr/share/podsync/parse.xsl" "`dirname "$0"`/parse.xsl"; do
	[ -f "$XSLT" ] && break
done

[ -f "$XSLT" ] || die "XSLT parse file not found."
verbose "found ('$XSLT')."


# History file path.
HISTORY="$PODSYNCHOME/history.txt"
verbose "History is at '$HISTORY'."


# Get all feeds on process their items.
while read FEEDURL; do
	FEED="`mktemp`"

	verbose -n "Fetching '$FEEDURL'... "
	$wget -q -O "$FEED" "$FEEDURL"

	if [ "$?" -ne 0 ]; then
		verbose 'failed!'
		error "Error while fetching feed '$FEEDURL'."
		continue
	else
		verbose 'OK.'
	fi

	COUNT=0

	# Parse feed and process the output of the XSLT script.
	$xsltproc $XSLT $FEED | while read SEPARATOR; do
		read PODCAST
		read ITEMURL
		read ITEMNAME

		PODCAST="${PODCAST#PODCAST:}"
		ITEMURL="${ITEMURL#ITEMURL:}"
		ITEMNAME="${ITEMNAME#ITEMNAME:}"

		COUNT=$[$COUNT+1]

		# Skip if the item has been downloaded before.
		exists "$ITEMURL" || continue

		# If there's an item limit and we're already over it, just add the
		# items to the history and skip without downloading.
		if [ ! -z "$LIMIT" ]; then
			if [ "$COUNT" -gt "$LIMIT" ]; then
				echo "$ITEMURL" >> "$HISTORY"
				continue
			fi
		fi

		# In clearing mode, write all items to the history and skip
		# downloading.
		if [ "$CLEAR" -ne 0 ]; then
			echo "$ITEMURL" >> "$HISTORY"
			continue
		fi

		TMP="`mktemp`"

		verbose -n "\tLoading '$ITEMURL' ... "
		$wget -q -O "$TMP" "$ITEMURL" >$LOG 2>&1
		if [ $? -ne 0 ]; then
			verbose 'failed!'
			error "Download of $ITEMURL failed."
			rm -f "$TMP"
		else
			# Escape podcast name.
			ESCAPEDPODCAST="${PODCAST//[\`\/\'\"]/_}"

			# Escape item name.
			ESCAPEDITEM="${ITEMNAME//[\`\/\'\"]/_}"

			# Append extension.
			EXTENSION="${ITEMURL##*.}"
			[ ! -z "$EXTENSION" ] && ESCAPEDITEM="$ESCAPEDITEM.$EXTENSION"

			# Move item to the podcast directory.
			mkdir -p "$PODSYNCHOME/podcasts/$ESCAPEDPODCAST"
			mv "$TMP" "$PODSYNCHOME/podcasts/$ESCAPEDPODCAST/$ESCAPEDITEM"

			# Add to history.
			echo "$ITEMURL" >> "$HISTORY"

			verbose 'OK.'
		fi
	done

	rm "$FEED"
done < "$PODSYNCHOME/podcasts.txt"
