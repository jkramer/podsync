#!/bin/bash
# makeogg, Copyright (C) 2008 by Jonas Kramer.
# Published under the terms of the GNU General Public License (GPL).


function error ()
{
	echo $@ >&2
}

function die ()
{
	error $@
	exit -1
}

function verbose ()
{
	if [ "$VERBOSE" -ne 0 ]; then
		echo -e "$@"
	fi
}


CLEAR=0
VERBOSE=0


LOG="/dev/null"

while getopts ":qhcH:v" OPTION; do
	case $OPTION in
		"v")
			VERBOSE=1
			;;

		"c")
			CLEAR=1
			;;

		"H")
			PODSYNCHOME="$OPTARG"
			;;

		"?")
			die "Unknown option -$OPTARG."
			;;

		":")
			die "Missing argument for option -$OPTARG."
			;;

		"h")
			$cat <<EOT
Usage: `basename "$0"` [-q|-h]

  -h  Print this help and exit.
  -c  Don't download anything, just mark all podcasts as "listened".
  -H  Use the argument of this option as the home directory.
  -v  Be verbose.


  HOW IT WORKS

Export \$PODSYNCHOME so it points to the directory you want to use for syncing
podcasts, or leave it empty if you're fine with the default ("\$HOME/podsync/").
Create a text file named "podcasts.txt" in that directory with the URLs of the
podcast feeds in it, one per line. Then run podsync and watch it download your
podcasts.

EOT
			exit
			;;
	esac
done


# Check if all required tools are in $PATH.
verbose -n "Checking availablity of required tools... "
for PROGRAM in "xsltproc" "wget" "sed" "mktemp" "rm" "cat"; do
	PROGPATH="`which "$PROGRAM" 2>$LOG`"
	if [ -z "$PROGPATH" ]; then
		die "$PROGRAM is not in your \$PATH."
	fi
	export $PROGRAM="$PROGPATH"
done
verbose "OK."


# Default home directory.
if [ -z "$PODSYNCHOME" ]; then
	export PODSYNCHOME="$HOME/podsync"
fi

[ -d "$PODSYNCHOME" ] || die "Home directory ('$PODSYNCHOME') does not exist."

verbose "Home is '$PODSYNCHOME'."

# Check for podcast list.
if [ ! -f "$PODSYNCHOME/podcasts.txt" ]; then
	die "No podcast list found in base directory."
fi


# Check for RSS parse XSLT script.
verbose -n 'Checking for XSLT script... '
for XSLT in "/usr/share/podsync/parse.xsl" "`dirname "$0"`/parse.xsl"; do
	[ -f "$XSLT" ] && break
done

if [ ! -f "$XSLT" ]; then
	die "XSLT parse file not found."
fi
verbose "found ('$XSLT')."

HISTORY="$PODSYNCHOME/history.txt"
verbose "History is at '$HISTORY'."

while read FEEDURL; do
	FEED="`mktemp`"

	verbose -n "Fetching '$FEEDURL'... "
	$wget -q -O "$FEED" "$FEEDURL"

	if [ "$?" -ne 0 ]; then
		verbose 'failed!'
		error "Error while fetching feed '$FEEDURL'."
		continue
	else
		verbose 'OK.'
	fi

	COUNT=0

	$xsltproc $XSLT $FEED | while read SEPARATOR; do
		read PODCAST
		read ITEMURL
		read ITEMNAME

		PODCAST="${PODCAST#PODCAST:}"
		ITEMURL="${ITEMURL#ITEMURL:}"
		ITEMNAME="${ITEMNAME#ITEMNAME:}"

		if [ -f "$HISTORY" ]; then
			if grep -q '^'"$ITEMURL"'$' "$HISTORY"; then
				continue
			fi
		fi

		if [ "$CLEAR" -ne 0 ]; then
			echo "$ITEMURL" >> "$HISTORY"
			continue
		fi

		TMP="`mktemp`"

		verbose -n "\tLoading '$ITEMURL' ... "
		$wget -q -O "$TMP" "$ITEMURL" >$LOG 2>&1
		if [ $? -ne 0 ]; then
			verbose 'failed!'
			error "Download of $ITEMURL failed."
			rm -f "$TMP"
		else
			ESCAPEDPODCAST="${PODCAST//[\`\/\'\"]/_}"
			ESCAPEDITEM="${ITEMNAME//[\`\/\'\"]/_}"
			mkdir -p "$PODSYNCHOME/podcasts/$ESCAPEDPODCAST"
			mv "$TMP" "$PODSYNCHOME/podcasts/$ESCAPEDPODCAST/$ESCAPEDITEM"
			echo "$ITEMURL" >> "$HISTORY"

			verbose 'OK.'
			COUNT=$[$COUNT+1]
		fi
	done

	verbose "\t$COUNT item(s) downloaded."

	rm "$FEED"
done < "$PODSYNCHOME/podcasts.txt"


